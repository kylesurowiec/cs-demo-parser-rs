use cs_demo_parser::events;
use cs_demo_parser::parser::Parser;
// Use the correct proto message module (usually generated by prost or protobuf)
// Replace `gameevents` with the actual module name if different in your crate
use cs_demo_parser::proto::msg;
use std::io::Cursor;
use std::sync::Arc;
use std::sync::atomic::{AtomicUsize, Ordering};
use std::thread;

#[test]
fn dispatch_basic_game_events() {
    let mut parser = Parser::new(Cursor::new(Vec::<u8>::new()));

    let ms = Arc::new(AtomicUsize::new(0));
    let rs = Arc::new(AtomicUsize::new(0));
    let re = Arc::new(AtomicUsize::new(0));

    let ms_c = ms.clone();
    parser.register_event_handler::<events::MatchStart, _>(move |_| {
        ms_c.fetch_add(1, Ordering::SeqCst);
    });
    let rs_c = rs.clone();
    parser.register_event_handler::<events::RoundStart, _>(move |_| {
        rs_c.fetch_add(1, Ordering::SeqCst);
    });
    let re_c = re.clone();
    parser.register_event_handler::<events::RoundEnd, _>(move |_| {
        re_c.fetch_add(1, Ordering::SeqCst);
    });

    let list = msg::CsvcMsgGameEventList {
        descriptors: vec![
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(1),
                name: Some("begin_new_match".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(2),
                name: Some("round_start".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(3),
                name: Some("round_end".into()),
                keys: vec![],
            },
        ],
    };
    parser.on_game_event_list(&list);

    parser.on_game_event(&msg::CsvcMsgGameEvent {
        event_name: None,
        eventid: Some(1),
        keys: vec![],
        passthrough: None,
    });
    parser.on_game_event(&msg::CsvcMsgGameEvent {
        event_name: None,
        eventid: Some(2),
        keys: vec![],
        passthrough: None,
    });
    parser.on_game_event(&msg::CsvcMsgGameEvent {
        event_name: None,
        eventid: Some(3),
        keys: vec![],
        passthrough: None,
    });

    thread::sleep(std::time::Duration::from_millis(20));

    assert!(ms.load(Ordering::SeqCst) >= 1);
    assert!(rs.load(Ordering::SeqCst) >= 1);
    assert!(re.load(Ordering::SeqCst) >= 1);
}

#[test]
fn dispatch_equipment_and_server_events() {
    let mut parser = Parser::new(Cursor::new(Vec::<u8>::new()));

    let ammo = Arc::new(AtomicUsize::new(0));
    let equip = Arc::new(AtomicUsize::new(0));
    let pickup = Arc::new(AtomicUsize::new(0));
    let slerp = Arc::new(AtomicUsize::new(0));
    let remove = Arc::new(AtomicUsize::new(0));
    let inspect = Arc::new(AtomicUsize::new(0));
    let cvar = Arc::new(AtomicUsize::new(0));
    let vote = Arc::new(AtomicUsize::new(0));
    let reward = Arc::new(AtomicUsize::new(0));

    let ammo_c = ammo.clone();
    parser.register_event_handler::<events::AmmoPickup, _>(move |_| {
        ammo_c.fetch_add(1, Ordering::SeqCst);
    });
    let equip_c = equip.clone();
    parser.register_event_handler::<events::ItemEquip, _>(move |_| {
        equip_c.fetch_add(1, Ordering::SeqCst);
    });
    let pickup_c = pickup.clone();
    parser.register_event_handler::<events::ItemPickup, _>(move |_| {
        pickup_c.fetch_add(1, Ordering::SeqCst);
    });
    let slerp_c = slerp.clone();
    parser.register_event_handler::<events::ItemPickupSlerp, _>(move |_| {
        slerp_c.fetch_add(1, Ordering::SeqCst);
    });
    let remove_c = remove.clone();
    parser.register_event_handler::<events::ItemDrop, _>(move |_| {
        remove_c.fetch_add(1, Ordering::SeqCst);
    });
    let inspect_c = inspect.clone();
    parser.register_event_handler::<events::InspectWeapon, _>(move |_| {
        inspect_c.fetch_add(1, Ordering::SeqCst);
    });
    let cvar_c = cvar.clone();
    parser.register_event_handler::<events::ServerCvar, _>(move |_| {
        cvar_c.fetch_add(1, Ordering::SeqCst);
    });
    let vote_c = vote.clone();
    parser.register_event_handler::<events::VoteCast, _>(move |_| {
        vote_c.fetch_add(1, Ordering::SeqCst);
    });
    let reward_c = reward.clone();
    parser.register_event_handler::<events::TournamentReward, _>(move |_| {
        reward_c.fetch_add(1, Ordering::SeqCst);
    });
    let c = ammo.clone();
    parser.register_event_handler::<events::AmmoPickup, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = equip.clone();
    parser.register_event_handler::<events::ItemEquip, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = pickup.clone();
    parser.register_event_handler::<events::ItemPickup, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = slerp.clone();
    parser.register_event_handler::<events::ItemPickupSlerp, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = remove.clone();
    parser.register_event_handler::<events::ItemDrop, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = inspect.clone();
    parser.register_event_handler::<events::InspectWeapon, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cvar.clone();
    parser.register_event_handler::<events::ServerCvar, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = vote.clone();
    parser.register_event_handler::<events::VoteCast, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = reward.clone();
    parser.register_event_handler::<events::TournamentReward, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });

    let list = msg::CsvcMsgGameEventList {
        descriptors: vec![
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(1),
                name: Some("ammo_pickup".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(2),
                name: Some("item_equip".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(3),
                name: Some("item_pickup".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(4),
                name: Some("item_pickup_slerp".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(5),
                name: Some("item_remove".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(6),
                name: Some("inspect_weapon".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(7),
                name: Some("server_cvar".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(8),
                name: Some("vote_cast".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(9),
                name: Some("tournament_reward".into()),
                keys: vec![],
            },
        ],
    };
    parser.on_game_event_list(&list);

    for id in 1..=9 {
        parser.on_game_event(&msg::CsvcMsgGameEvent {
            event_name: None,
            eventid: Some(id),
            keys: vec![],
            passthrough: None,
        });
    }

    thread::sleep(std::time::Duration::from_millis(20));

    assert!(ammo.load(Ordering::SeqCst) >= 1);
    assert!(equip.load(Ordering::SeqCst) >= 1);
    assert!(pickup.load(Ordering::SeqCst) >= 1);
    assert!(slerp.load(Ordering::SeqCst) >= 1);
    assert!(remove.load(Ordering::SeqCst) >= 1);
    assert!(inspect.load(Ordering::SeqCst) >= 1);
    assert!(cvar.load(Ordering::SeqCst) >= 1);
    assert!(vote.load(Ordering::SeqCst) >= 1);
    assert!(reward.load(Ordering::SeqCst) >= 1);
}

#[test]
fn dispatch_round_state_events() {
    let mut parser = Parser::new(Cursor::new(Vec::<u8>::new()));

    let final_c = Arc::new(AtomicUsize::new(0));
    let last_half_c = Arc::new(AtomicUsize::new(0));
    let match_point_c = Arc::new(AtomicUsize::new(0));
    let match_start_c = Arc::new(AtomicUsize::new(0));
    let warmup_c = Arc::new(AtomicUsize::new(0));
    let upload_stats_c = Arc::new(AtomicUsize::new(0));
    let mvp_c = Arc::new(AtomicUsize::new(0));
    let freeze_end_c = Arc::new(AtomicUsize::new(0));
    let official_c = Arc::new(AtomicUsize::new(0));

    let final_c_c = final_c.clone();
    parser.register_event_handler::<events::RoundAnnounceFinal, _>(move |_| {
        final_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let last_half_c_c = last_half_c.clone();
    parser.register_event_handler::<events::RoundAnnounceLastRoundHalf, _>(move |_| {
        last_half_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let match_point_c_c = match_point_c.clone();
    parser.register_event_handler::<events::RoundAnnounceMatchPoint, _>(move |_| {
        match_point_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let match_start_c_c = match_start_c.clone();
    parser.register_event_handler::<events::RoundAnnounceMatchStart, _>(move |_| {
        match_start_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let warmup_c_c = warmup_c.clone();
    parser.register_event_handler::<events::RoundAnnounceWarmup, _>(move |_| {
        warmup_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let upload_stats_c_c = upload_stats_c.clone();
    parser.register_event_handler::<events::RoundEndUploadStats, _>(move |_| {
        upload_stats_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let mvp_c_c = mvp_c.clone();
    parser.register_event_handler::<events::RoundMVPAnnouncement, _>(move |_| {
        mvp_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let freeze_end_c_c = freeze_end_c.clone();
    parser.register_event_handler::<events::RoundFreezetimeEnd, _>(move |_| {
        freeze_end_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let official_c_c = official_c.clone();
    parser.register_event_handler::<events::RoundEndOfficial, _>(move |_| {
        official_c_c.fetch_add(1, Ordering::SeqCst);
    });
    let c = final_c.clone();
    parser.register_event_handler::<events::RoundAnnounceFinal, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = last_half_c.clone();
    parser.register_event_handler::<events::RoundAnnounceLastRoundHalf, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = match_point_c.clone();
    parser.register_event_handler::<events::RoundAnnounceMatchPoint, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = match_start_c.clone();
    parser.register_event_handler::<events::RoundAnnounceMatchStart, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = warmup_c.clone();
    parser.register_event_handler::<events::RoundAnnounceWarmup, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = upload_stats_c.clone();
    parser.register_event_handler::<events::RoundEndUploadStats, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = mvp_c.clone();
    parser.register_event_handler::<events::RoundMVPAnnouncement, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = freeze_end_c.clone();
    parser.register_event_handler::<events::RoundFreezetimeEnd, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = official_c.clone();
    parser.register_event_handler::<events::RoundEndOfficial, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });

    let list = msg::CsvcMsgGameEventList {
        descriptors: vec![
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(1),
                name: Some("round_announce_final".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(2),
                name: Some("round_announce_last_round_half".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(3),
                name: Some("round_announce_match_point".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(4),
                name: Some("round_announce_match_start".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(5),
                name: Some("round_announce_warmup".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(6),
                name: Some("round_end_upload_stats".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(7),
                name: Some("round_mvp".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(8),
                name: Some("round_freeze_end".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(9),
                name: Some("round_officially_ended".into()),
                keys: vec![],
            },
        ],
    };
    parser.on_game_event_list(&list);

    for id in 1..=9 {
        parser.on_game_event(&msg::CsvcMsgGameEvent {
            event_name: None,
            eventid: Some(id),
            keys: vec![],
            passthrough: None,
        });
    }

    thread::sleep(std::time::Duration::from_millis(20));

    assert!(final_c.load(Ordering::SeqCst) >= 1);
    assert!(last_half_c.load(Ordering::SeqCst) >= 1);
    assert!(match_point_c.load(Ordering::SeqCst) >= 1);
    assert!(match_start_c.load(Ordering::SeqCst) >= 1);
    assert!(warmup_c.load(Ordering::SeqCst) >= 1);
    assert!(upload_stats_c.load(Ordering::SeqCst) >= 1);
    assert!(mvp_c.load(Ordering::SeqCst) >= 1);
    assert!(freeze_end_c.load(Ordering::SeqCst) >= 1);
    assert!(official_c.load(Ordering::SeqCst) >= 1);
}

#[test]
fn dispatch_additional_game_events() {
    let mut parser = Parser::new(Cursor::new(Vec::<u8>::new()));

    let announce_phase_end = Arc::new(AtomicUsize::new(0));
    let buytime_ended = Arc::new(AtomicUsize::new(0));
    let choppers_incoming_warning = Arc::new(AtomicUsize::new(0));
    let cs_intermission = Arc::new(AtomicUsize::new(0));
    let cs_match_end_restart = Arc::new(AtomicUsize::new(0));
    let cs_pre_restart = Arc::new(AtomicUsize::new(0));
    let cs_round_final_beep = Arc::new(AtomicUsize::new(0));
    let cs_round_start_beep = Arc::new(AtomicUsize::new(0));
    let cs_win_panel_match = Arc::new(AtomicUsize::new(0));
    let cs_win_panel_round = Arc::new(AtomicUsize::new(0));
    let enter_bombzone = Arc::new(AtomicUsize::new(0));
    let exit_bombzone = Arc::new(AtomicUsize::new(0));
    let enter_buyzone = Arc::new(AtomicUsize::new(0));
    let exit_buyzone = Arc::new(AtomicUsize::new(0));
    let entity_visible = Arc::new(AtomicUsize::new(0));
    let firstbombs_incoming_warning = Arc::new(AtomicUsize::new(0));
    let hltv_chase = Arc::new(AtomicUsize::new(0));
    let hltv_fixed = Arc::new(AtomicUsize::new(0));
    let hltv_message = Arc::new(AtomicUsize::new(0));
    let hltv_status = Arc::new(AtomicUsize::new(0));
    let hostage_follows = Arc::new(AtomicUsize::new(0));
    let hostname_changed = Arc::new(AtomicUsize::new(0));
    let jointeam_failed = Arc::new(AtomicUsize::new(0));
    let other_death = Arc::new(AtomicUsize::new(0));
    let player_blind = Arc::new(AtomicUsize::new(0));
    let show_survival_respawn_status = Arc::new(AtomicUsize::new(0));
    let survival_paradrop_spawn = Arc::new(AtomicUsize::new(0));
    let switch_team = Arc::new(AtomicUsize::new(0));
    let weapon_fire_on_empty = Arc::new(AtomicUsize::new(0));
    let weapon_zoom = Arc::new(AtomicUsize::new(0));
    let weapon_zoom_rifle = Arc::new(AtomicUsize::new(0));

    let c = announce_phase_end.clone();
    parser.register_event_handler::<events::AnnouncePhaseEnd, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = buytime_ended.clone();
    parser.register_event_handler::<events::BuytimeEnded, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = choppers_incoming_warning.clone();
    parser.register_event_handler::<events::ChoppersIncomingWarning, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_intermission.clone();
    parser.register_event_handler::<events::CsIntermission, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_match_end_restart.clone();
    parser.register_event_handler::<events::CsMatchEndRestart, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_pre_restart.clone();
    parser.register_event_handler::<events::CsPreRestart, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_round_final_beep.clone();
    parser.register_event_handler::<events::CsRoundFinalBeep, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_round_start_beep.clone();
    parser.register_event_handler::<events::CsRoundStartBeep, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_win_panel_match.clone();
    parser.register_event_handler::<events::CsWinPanelMatch, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = cs_win_panel_round.clone();
    parser.register_event_handler::<events::CsWinPanelRound, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = enter_bombzone.clone();
    parser.register_event_handler::<events::EnterBombzone, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = exit_bombzone.clone();
    parser.register_event_handler::<events::ExitBombzone, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = enter_buyzone.clone();
    parser.register_event_handler::<events::EnterBuyzone, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = exit_buyzone.clone();
    parser.register_event_handler::<events::ExitBuyzone, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = entity_visible.clone();
    parser.register_event_handler::<events::EntityVisible, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = firstbombs_incoming_warning.clone();
    parser.register_event_handler::<events::FirstBombsIncomingWarning, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hltv_chase.clone();
    parser.register_event_handler::<events::HltvChase, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hltv_fixed.clone();
    parser.register_event_handler::<events::HltvFixed, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hltv_message.clone();
    parser.register_event_handler::<events::HltvMessage, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hltv_status.clone();
    parser.register_event_handler::<events::HltvStatus, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hostage_follows.clone();
    parser.register_event_handler::<events::HostageFollows, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = hostname_changed.clone();
    parser.register_event_handler::<events::HostnameChanged, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = jointeam_failed.clone();
    parser.register_event_handler::<events::JoinTeamFailed, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = other_death.clone();
    parser.register_event_handler::<events::OtherDeath, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = player_blind.clone();
    parser.register_event_handler::<events::PlayerBlind, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = show_survival_respawn_status.clone();
    parser.register_event_handler::<events::ShowSurvivalRespawnStatus, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = survival_paradrop_spawn.clone();
    parser.register_event_handler::<events::SurvivalParadropSpawn, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = switch_team.clone();
    parser.register_event_handler::<events::SwitchTeam, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = weapon_fire_on_empty.clone();
    parser.register_event_handler::<events::WeaponFireOnEmpty, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = weapon_zoom.clone();
    parser.register_event_handler::<events::WeaponZoom, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });
    let c = weapon_zoom_rifle.clone();
    parser.register_event_handler::<events::WeaponZoomRifle, _>(move |_| {
        c.fetch_add(1, Ordering::SeqCst);
    });

    let list = msg::CsvcMsgGameEventList {
        descriptors: vec![
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(1),
                name: Some("announce_phase_end".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(2),
                name: Some("buytime_ended".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(3),
                name: Some("choppers_incoming_warning".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(4),
                name: Some("cs_intermission".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(5),
                name: Some("cs_match_end_restart".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(6),
                name: Some("cs_pre_restart".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(7),
                name: Some("cs_round_final_beep".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(8),
                name: Some("cs_round_start_beep".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(9),
                name: Some("cs_win_panel_match".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(10),
                name: Some("cs_win_panel_round".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(11),
                name: Some("enter_bombzone".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(12),
                name: Some("exit_bombzone".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(13),
                name: Some("enter_buyzone".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(14),
                name: Some("exit_buyzone".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(15),
                name: Some("entity_visible".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(16),
                name: Some("firstbombs_incoming_warning".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(17),
                name: Some("hltv_chase".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(18),
                name: Some("hltv_fixed".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(19),
                name: Some("hltv_message".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(20),
                name: Some("hltv_status".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(21),
                name: Some("hostage_follows".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(22),
                name: Some("hostname_changed".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(23),
                name: Some("jointeam_failed".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(24),
                name: Some("other_death".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(25),
                name: Some("player_blind".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(26),
                name: Some("show_survival_respawn_status".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(27),
                name: Some("survival_paradrop_spawn".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(28),
                name: Some("switch_team".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(29),
                name: Some("weapon_fire_on_empty".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(30),
                name: Some("weapon_zoom".into()),
                keys: vec![],
            },
            msg::csvc_msg_game_event_list::DescriptorT {
                eventid: Some(31),
                name: Some("weapon_zoom_rifle".into()),
                keys: vec![],
            },
        ],
    };
    parser.on_game_event_list(&list);

    for id in 1..=31 {
        parser.on_game_event(&msg::CsvcMsgGameEvent {
            event_name: None,
            eventid: Some(id),
            keys: vec![],
            passthrough: None,
        });
    }

    thread::sleep(std::time::Duration::from_millis(20));

    assert!(announce_phase_end.load(Ordering::SeqCst) >= 1);
    assert!(buytime_ended.load(Ordering::SeqCst) >= 1);
    assert!(choppers_incoming_warning.load(Ordering::SeqCst) >= 1);
    assert!(cs_intermission.load(Ordering::SeqCst) >= 1);
    assert!(cs_match_end_restart.load(Ordering::SeqCst) >= 1);
    assert!(cs_pre_restart.load(Ordering::SeqCst) >= 1);
    assert!(cs_round_final_beep.load(Ordering::SeqCst) >= 1);
    assert!(cs_round_start_beep.load(Ordering::SeqCst) >= 1);
    assert!(cs_win_panel_match.load(Ordering::SeqCst) >= 1);
    assert!(cs_win_panel_round.load(Ordering::SeqCst) >= 1);
    assert!(enter_bombzone.load(Ordering::SeqCst) >= 1);
    assert!(exit_bombzone.load(Ordering::SeqCst) >= 1);
    assert!(enter_buyzone.load(Ordering::SeqCst) >= 1);
    assert!(exit_buyzone.load(Ordering::SeqCst) >= 1);
    assert!(entity_visible.load(Ordering::SeqCst) >= 1);
    assert!(firstbombs_incoming_warning.load(Ordering::SeqCst) >= 1);
    assert!(hltv_chase.load(Ordering::SeqCst) >= 1);
    assert!(hltv_fixed.load(Ordering::SeqCst) >= 1);
    assert!(hltv_message.load(Ordering::SeqCst) >= 1);
    assert!(hltv_status.load(Ordering::SeqCst) >= 1);
    assert!(hostage_follows.load(Ordering::SeqCst) >= 1);
    assert!(hostname_changed.load(Ordering::SeqCst) >= 1);
    assert!(jointeam_failed.load(Ordering::SeqCst) >= 1);
    assert!(other_death.load(Ordering::SeqCst) >= 1);
    assert!(player_blind.load(Ordering::SeqCst) >= 1);
    assert!(show_survival_respawn_status.load(Ordering::SeqCst) >= 1);
    assert!(survival_paradrop_spawn.load(Ordering::SeqCst) >= 1);
    assert!(switch_team.load(Ordering::SeqCst) >= 1);
    assert!(weapon_fire_on_empty.load(Ordering::SeqCst) >= 1);
    assert!(weapon_zoom.load(Ordering::SeqCst) >= 1);
    assert!(weapon_zoom_rifle.load(Ordering::SeqCst) >= 1);
}
